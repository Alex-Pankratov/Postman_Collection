{
	"info": {
		"_postman_id": "ab9919e5-a94e-49e7-8358-c33d07d1becd",
		"name": "SWAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "https://swapi.dev/api/",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6275c000-b901-4853-b297-bef3ff06fb41",
						"exec": [
							"//1. Correct response format JSON\r",
							"pm.test(\"Correct respon format JSON\", function(){\r",
							"    pm.response.to.have.jsonBody()\r",
							"})\r",
							"\r",
							"//2. We have all the declared fields in the response\r",
							"pm.test(\"Check that we have all the declared fields\", function(){\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"people\");\r",
							"    pm.expect(jsonData).to.have.property(\"planets\");\r",
							"    pm.expect(jsonData).to.have.property(\"films\");\r",
							"    pm.expect(jsonData).to.have.property(\"species\");\r",
							"    pm.expect(jsonData).to.have.property(\"vehicles\");\r",
							"    pm.expect(jsonData).to.have.property(\"starships\");\r",
							"})\r",
							"\r",
							"//3. Field value isn't NULL\r",
							"pm.test(\"Check if value isn't NULL\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.people).not.equal(null);\r",
							"    pm.expect(jsonData.planets).not.equal(null);\r",
							"    pm.expect(jsonData.films).not.equal(null);\r",
							"    pm.expect(jsonData.species).not.equal(null);\r",
							"    pm.expect(jsonData.vehicles).not.equal(null);\r",
							"    pm.expect(jsonData.starships).not.equal(null);  \r",
							"})\r",
							"\r",
							"//4. Check if value isn't empty\r",
							"pm.test(\"Check if value isn't empty\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.people).not.equal(\"\");\r",
							"    pm.expect(jsonData.planets).not.equal(\"\");\r",
							"    pm.expect(jsonData.films).not.equal(\"\");\r",
							"    pm.expect(jsonData.species).not.equal(\"\");\r",
							"    pm.expect(jsonData.vehicles).not.equal(\"\");\r",
							"    pm.expect(jsonData.starships).not.equal(\"\"); \r",
							"})\r",
							"\r",
							"//5. Check if field correspods to a specific value\r",
							"pm.test(\"Check if field correspods to a specific value\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.people).to.equal(\"http://swapi.dev/api/people/\");\r",
							"    pm.expect(jsonData.planets).to.equal(\"http://swapi.dev/api/planets/\");\r",
							"    pm.expect(jsonData.films).to.equal(\"http://swapi.dev/api/films/\");\r",
							"    pm.expect(jsonData.species).to.equal(\"http://swapi.dev/api/species/\");\r",
							"    pm.expect(jsonData.vehicles).to.equal(\"http://swapi.dev/api/vehicles/\");\r",
							"    pm.expect(jsonData.starships).to.equal(\"http://swapi.dev/api/starships/\");\r",
							"})\r",
							"\r",
							"//6. Status code is 200\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"   pm.response.to.have.status(200); \r",
							"})\r",
							"\r",
							"//7. Status massage is OK\r",
							"pm.test(\"Status  massage is OK\", function(){\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"})\r",
							"\r",
							"//8. Response time is less than 1000ms\r",
							"pm.test(\"Response time is less than 1000ms\",function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"//9. There is a specific header in the response\r",
							"pm.test(\"There is a specific header in the response\",function(){\r",
							"    pm.response.to.have.header(\"Content-Type\")\r",
							"})\r",
							"\r",
							"//10. There response has a specific header with a specific value\r",
							"pm.test(\"There response has a specific header with a specific value\", function(){\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "https://swapi.co/api/",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fbcbce14-9ca0-4458-8d8c-a6e475e868aa",
						"exec": [
							"//1. Cookie exists\r",
							"pm.test(\"Cookie exists\",function(){\r",
							"    pm.cookies.has(\"__cfduid\")\r",
							"})\r",
							"\r",
							"//2. Cookie has value\r",
							"pm.test(\"Cookie has value\", function(){\r",
							"    try{\r",
							"        var MY_COOKIE = pm.cookies.get(\"__cfduid\");\r",
							"        console.log(MY_COOKIE);\r",
							"    } catch(e){\r",
							"        console.log(\"Some problem with Cookie ->\" + e)\r",
							"    } \r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.co/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"co"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "schema",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "44180d42-ccc1-4aa7-8d48-92b8a8ef56f0",
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"\r",
							"var schema = {\r",
							"    //specify the type of object\r",
							"    \"type\": \"object\",\r",
							"    //specify required properties\r",
							"    \"required\": [\"people\", \"planets\", \"films\", \"species\", \"vehicles\", \"starships\"],\r",
							"    //describe the properties\r",
							"    \"properties\": {\r",
							"        \"people\": {\"type\":\"string\"},\r",
							"        \"planets\": {\"type\":\"string\"},\r",
							"        \"films\": {\"type\":\"string\"},\r",
							"        \"species\": {\"type\":\"string\"},\r",
							"        \"vehicles\": {\"type\":\"string\"},\r",
							"        \"starships\": {\"type\":\"string\"},\r",
							"    }\r",
							"\r",
							"};\r",
							"pm.test(\"Body is correct\", function(){\r",
							"    pm.expect(tv4.validate(data,schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followOriginalHttpMethod": true,
				"removeRefererHeaderOnRedirect": true,
				"tlsPreferServerCiphers": true,
				"followAuthorizationHeader": true,
				"disableCookies": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "people/1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fa4a600c-51a7-41af-92ba-ca6bb4226ff4",
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"\r",
							"var schema = {\r",
							"    \"type\":\"object\",\r",
							"    \"required\": [\"name\", \"homeworld\", \"films\", \"vehicles\", \"starships\"],\r",
							"    \"property\": {\r",
							"        \"name\": {\"type\": \"string\"},\r",
							"        \"homeworld\": {\"type\": \"string\"},\r",
							"        \"films\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\": \"string\"}\r",
							"        },\r",
							"        \"vehicles\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\": \"string\"}\r",
							"        },\r",
							"        \"starships\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\": \"string\"}\r",
							"        },\r",
							"    }\r",
							"};\r",
							"pm.test(\"Body is correct\", function(){\r",
							"    pm.expect(tv4.validate(data, schema)).to.be.true;\r",
							"});    "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/people/1",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						"people",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "mock post exemple",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"Alexey\"}"
				},
				"url": {
					"raw": "https://e4c99a3e-8ac0-469c-8fa3-99c2e439a0f2.mock.pstmn.io/action",
					"protocol": "https",
					"host": [
						"e4c99a3e-8ac0-469c-8fa3-99c2e439a0f2",
						"mock",
						"pstmn",
						"io"
					],
					"path": [
						"action"
					]
				}
			},
			"response": [
				{
					"name": "https://e4c99a3e-8ac0-469c-8fa3-99c2e439a0f2.mock.pstmn.io",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"Alexey\"}"
						},
						"url": {
							"raw": "https://e4c99a3e-8ac0-469c-8fa3-99c2e439a0f2.mock.pstmn.io/action",
							"protocol": "https",
							"host": [
								"e4c99a3e-8ac0-469c-8fa3-99c2e439a0f2",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"action"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Mon, 07 Sep 2020 07:33:58 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=9050428bec0fc1ce"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=aceb0289a150f445"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1599463867"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"Alexey\",\n        \"status\": \"created\",\n        \"message\": \"success\"\n    }\n}"
				},
				{
					"name": "https://e4c99a3e-8ac0-469c-8fa3-99c2e439a0f2.mock.pstmn.io",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://e4c99a3e-8ac0-469c-8fa3-99c2e439a0f2.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"e4c99a3e-8ac0-469c-8fa3-99c2e439a0f2",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Mon, 07 Sep 2020 07:30:07 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=9050428bec0fc1ce"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=aceb0289a150f445"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1599463867"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"test\",\n        \"message\": \"success\"\n    }\n}"
				}
			]
		},
		{
			"name": "mock get  exemple",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://e4c99a3e-8ac0-469c-8fa3-99c2e439a0f2.mock.pstmn.io",
					"protocol": "https",
					"host": [
						"e4c99a3e-8ac0-469c-8fa3-99c2e439a0f2",
						"mock",
						"pstmn",
						"io"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}